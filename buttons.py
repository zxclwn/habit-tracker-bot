import calendar
import locale
from datetime import datetime
import habitTrackerDataBase as sq
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from src.localization.localization import language_setup
from src.callbackdatas import language

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–∫–ª–∏–∫—É –º–µ–Ω—é
def get_start_buttons():
    btn = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn.row(KeyboardButton('/menu'))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫–∏ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def get_menu_buttons(user_id):
    btn = InlineKeyboardMarkup()
    loc = await language_setup(user_id)
    btn.row(InlineKeyboardButton(loc.B_MAIN_YOUR_TRACKERS, callback_data='menu'))
    btn.row(InlineKeyboardButton(loc.B_MAIN_MENU_TRACKERS, callback_data='tracker_menu'),  # tracker_delete_menu
            InlineKeyboardButton(loc.B_MAIN_CREATE_TRACKER, callback_data='new'))
    btn.row(InlineKeyboardButton(loc.B_CLOSE, callback_data='close'))
    return btn


async def get_loc_buttons(user_id):
    btn = InlineKeyboardMarkup()
    loc = await language_setup(user_id)

    btn.row(
        InlineKeyboardButton(loc.B_LOC_ENG, callback_data=language.new("en")),
        InlineKeyboardButton(loc.B_LOC_UA, callback_data=language.new("uk")),
    )
    btn.row(InlineKeyboardButton(loc.B_CLOSE, callback_data='close'))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä—ñ–≤
async def get_tracker_menu_buttons(user_id):
    btn = InlineKeyboardMarkup()
    loc = await language_setup(user_id)
    btn.row(InlineKeyboardButton(loc.B_TRACKER_DELETE, callback_data='tracker_delete_menu'),
            InlineKeyboardButton(loc.B_TRACKER_RENAME, callback_data='tracker_rename_menu'))
    btn.row(InlineKeyboardButton(loc.B_BACK, callback_data="back"))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫—É –¥–æ–ø–æ–º–æ–≥–∏
def get_help_buttons():
    btn = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn.insert(KeyboardButton('/menu'))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–∫–µ—Ä–∞
async def get_confirmation_deltrack_button(tracker, user_id):
    btn = InlineKeyboardMarkup()
    loc = await language_setup(user_id)
    btn.row(InlineKeyboardButton(loc.B_YES, callback_data=f'tracker_delete_{tracker}'),
            InlineKeyboardButton(loc.B_BACK, callback_data='tracker_delete_menu'))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
async def get_confirmation_delprofile_button(user_id):
    btn = InlineKeyboardMarkup()
    loc = await language_setup(user_id)
    btn.row(InlineKeyboardButton(loc.B_YES, callback_data=f'profile_delete'),
            InlineKeyboardButton(loc.B_NO, callback_data='profile_delete_decline'))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–Ω–æ–ø–∫–∏ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (—Ç—Ä–µ–∫–µ—Ä—ñ–≤)
async def generate_tracker_buttons(names, action, user_id):
    btn = InlineKeyboardMarkup(row_width=3)

    loc = await language_setup(user_id)
    if action == 'choise':
        for name in names:
            btn.insert(InlineKeyboardButton(name, callback_data=f"tracker_{name}"))
        btn.row(InlineKeyboardButton(loc.B_BACK, callback_data="back"))
        return btn
    elif action == 'delete':
        for name in names:
            btn.insert(InlineKeyboardButton(name, callback_data=f"tracker_confirm_{name}"))
    elif action == 'edit':
        for name in names:
            btn.insert(InlineKeyboardButton(name, callback_data=f"tracker_edit_{name}"))

    btn.row(InlineKeyboardButton(loc.B_BACK, callback_data="tracker_menu"))
    return btn


# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–∞–ª–µ–Ω–¥–∞—Ä –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —Ä–æ–∫—É —Ç–∞ –º—ñ—Å—è—Ü—è
async def generate_calendar_buttons(user_id, year, month, tracker_name):
    calendar_buttons = InlineKeyboardMarkup(row_width=7)
    cal = calendar.monthcalendar(year, month)

    now = datetime.now()
    loc = await language_setup(user_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ
    locale.setlocale(locale.LC_TIME, loc.LOC)

    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º—ñ—Å—è—Ü–µ–º —ñ —Ä–æ–∫–æ–º
    calendar_buttons.row(InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore"))

    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
    calendar_buttons.row(*[InlineKeyboardButton(calendar.day_abbr[i], callback_data="ignore") for i in range(7)])

    # –î–æ–¥–∞—î–º–æ –¥–Ω—ñ –º—ñ—Å—è—Ü—è
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
                start = sq.is_start_date(user_id, year, month, day, tracker_name)
                marked = sq.is_marked(user_id, year, month, day, tracker_name)
                active = now.year == year and now.month == month and now.day == day

                if start:
                    text = f"{day} üü©" if marked else f"{day} üü¶"
                elif active:
                    text = f"{day} üü¢" if marked else f"{day} üî¥"
                else:
                    text = f"{day} ‚úÖ" if marked else str(day)

                row.append(InlineKeyboardButton(text, callback_data=f"calendar_{year}_{month}_{day}_{tracker_name}"))
        calendar_buttons.row(*row)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ—Å—è—Ü—ñ–≤
    calendar_buttons.row(
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prevmonth_{tracker_name}"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"nextmonth_{tracker_name}")
    )

    calendar_buttons.row(
        InlineKeyboardButton(loc.B_BACK, callback_data="back")
    )

    return calendar_buttons
